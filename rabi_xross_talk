# -*- coding: utf-8 -*-
"""
Created on Mon Feb 28 20:34:08 2022

@author: Danny's pc
"""
#%%
import matplotlib.pyplot as plt

e = 1.6e-19
e0 = 8.85e-12
M = 6.6551079e-26

f = 300e3 * 2 * np.pi
Z = 1



def length_scale(Z,f):
    return (Z**2 * e**2 / (4 * np.pi * e0 * M * f**2)) ** (1/3)





#%%

def population(t):
    return (np.sin(t/2))**2

def population1(t,const):
    return(np.sin(t * const/2))**2


sample = np.linspace(0.1,1,5)
t = np.linspace(0,2*np.pi,1000)

xlabel = np.linspace(0,6,7)
ylabel = np.linspace(0,1,5)
#xlabel = np.append(xlabel,np.pi)
#ylabel = np.append(ylabel,0.01)

for i in sample:
    plt.plot(t,population1(t,i),label=i)


plt.title('Rabi ocillation for addressed target $ Ca^+ $ions ',fontsize=15)
plt.vlines(np.pi,0,1, linestyles='dashed')
plt.hlines(0.01, t[0], t[-1],linestyles='dashed')
plt.xlabel('\u03A9t',fontsize=15)
plt.ylabel('$ P_e $',fontsize=15)
plt.yticks(ylabel)
plt.xticks(xlabel)
plt.legend()
plt.savefig('rabi', dpi=300)
#%%
#
d = 12.5e-6


def ratio(w,d):
    
    ratio = ( 1 - np.cos(np.pi * np.exp(d**2 / w**2) ) ) / 2 
    
    return ratio


x = np.linspace(0,0.00005,2000000) #
ylabel = np.linspace(0,1,11)
xlabel = np.linspace(0,5,2)


plt.title('Ratio between excited states from two ions \n at when the addressed ion reaches the max population')

plt.hlines(0.1,x[0],x[-1],linestyles='solid',color='red',label='Desired ratio')
plt.plot(x,ratio(x,d))
plt.yticks(ylabel)

plt.xlabel('Beam size /m')
plt.ylabel('Ratio')
plt.legend()
plt.show()
plt.savefig('Crosswalk_ratio', dpi=300)



