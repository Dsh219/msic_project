# -*- coding: utf-8 -*-
#%%
import numpy as np
import matplotlib.pyplot as plt
# unit in mm, and degree 

Lambda= 0.000729
pi = np.pi

f=[10,101.38,40]
#f=[10]
u=[60]
v=[]
a=[]
s=[0,-122.1]
theta=[0.1]

w=[0.05]


def Vv_(u,theta,f):
    return (1 / (u + (Lambda**2 / (pi**2 * theta**4 * (u+f)))) + 1 / f)**-1

def y_(d,u,f,theta):
    return (1 - d / Vv_(u, theta, f)) * u * np.tan(theta * np.pi /180 ) 
    
def a_(f,u,theta):      
    return f / np.sqrt((f-u)**2 + (Lambda/(np.pi * theta))**2)

def Wasit(z, theta):
    return np.sqrt((z*theta)**2 + Lambda**2 / (pi * theta)**2)



def y(d,f,u,v,s,theta,a):
    '''
    

    Parameters
    ----------
    d : float
        seperation between the final lens to the ion.
    f : array/list
        focus lengths of the lens used.
    u : array/list
        seperation between each source to the corresponding len.
    v : array/list
        seperation between each image to the corresponding len.
    s : array/list
        seperation between the consecutive lens.
    theta : array-list 
        divergence angle.
    a : array/list
       magnification constant.

    Returns
    -------
    float
        seperation of the beam at the ion plane.

    '''

    if len(f) < 2 :
        
       f=f[0]
       u=u[0]
       #v=v[0]
       theta=theta[0]
       
       y = y_(d,u,f,theta)  
        
       return y
   
    else:
        
        v0 = Vv_(u[0], theta[0], f[0])    
        v.append(v0)
        
        u1 = f[0] + f[1] + s[0] - v[0] 
        u.append(u1)
        
        a0 = a_(f[0],u[0],theta[0])
        a.append(a0)
        
        theta1 = theta[0] / a[0]
        theta.append(theta1)
        
        v1 = Vv_(u[1], theta[1], f[1]) 
        v.append(v1)
        
        a1 = a_(f[1],u[1],theta[1])
        a.append(a1)
        
        
        if len(f) == len(u):
            
            return y_(d,u[-1],f[-1],theta[-1])
        
        else :
            j = 0
            while len(f) > len(u):
                j += 1 
                U = f[j] + f[j+1] + s[j] - v[j]
                #print(U)
                u.append(U)
                Theta = theta[j] / a[j]
                theta.append(Theta)
                V = Vv_(u[j+1],theta[j+1],f[j+1])
                v.append(V)
                A = a_(f[j+1],u[j+1],theta[j+1])
                a.append(A)
            
            Dd = v[-1] - d 
            Ww = Wasit(Dd, theta[-1])
                
            return y_(d,u[-1],f[-1],theta[-1]) , Ww
    
#%%
#quick test
d = 30


#Y,W = y(d,f,u,v,s,theta,a)


#%%
#varying u

uu = np.linspace(15,90,1000)

yy = []
aa = []
ww = []

for i in uu :
    u.clear()
    f.clear()
    v.clear()
    a.clear()
    theta.clear()
    
    f=[10,101.38,40]
    u=[]
    v=[]
    a=[]
    s=[0,20]
    theta=[0.1]
    A = 1
    
    u.append(i)
    Y, W =y(d,f,u,v,s,theta,a)
    for i in range(len(a)):
        A *= a[i]
    yy.append(Y)
    aa.append(A)
    ww.append(W)
    

#%%



#%%
plt.figure(1)
plt.title('initial sepeartion vs seperation of the beam')
plt.xlabel('u/mm')
plt.ylabel('y/mm')
plt.plot(uu,yy,label='simulation')
#plt.plot(data_u,data_y,'x',label='zemax data')
plt.legend()
plt.savefig('u vs y',dpi=300)
#%%

plt.figure(2)
plt.title('initial sepeartion vs magnification')
plt.xlabel('u/mm')
plt.ylabel('a')
plt.plot(uu,aa)
plt.savefig('u vs a',dpi=300)
#%%

Uu =  np.linspace(15, 95, 9)
W_u = [1.30592E-01,2.03816E-01,2.98834E-01, 4.00422E-01,5.04627E-01,6.10109E-01,7.16305E-01]

#%%
plt.figure(2)
plt.title('initial sepeartion vs wasit')
plt.xlabel('u/mm')
plt.ylabel('w')
plt.plot(uu,ww)
plt.plot(Uu[:len(W_u)],W_u,'x',label='zemax data')
plt.legend()
plt.savefig('u vs w',dpi=300)

#%%

#varying f 

ff = np.linspace(0,90,100)

yy = []
aa = []

for i in ff :
    u.clear()
    f.clear()
    v.clear()
    a.clear()
    theta.clear()
    
    f=[i,101.38,40]
    u=[60]
    v=[]
    a=[]
    s=[0,20]
    theta=[0.1]
    A = 1
    
   
    Y,W=y(d,f,u,v,s,theta,a) 
    for i in range(len(a)):
        A *= a[i]
    yy.append(Y)
    aa.append(A)

#%%
plt.figure(3)
plt.title('first f vs seperation of the beam')
plt.xlabel('f/mm')
plt.ylabel('y/mm')
plt.plot(ff,yy,label='simulation')
#plt.plot(data_u,data_y,'x',label='zemax data')
plt.legend()
plt.savefig('f1 vs y',dpi=300)

#%%
plt.figure(4)
plt.title('first f  vs magnification')
plt.xlabel('f/mm')
plt.ylabel('a')
plt.plot(ff,aa)
plt.savefig('f1 vs a',dpi=300)

#%%

#varying s2

ss = np.linspace(-122.1,90,201)

yy = []
aa = []
ww = []
for i in ss :
    u.clear()
    f.clear()
    v.clear()
    a.clear()
    theta.clear()    
    f=[10,101.38,40]
    u=[60]
    v=[]
    a=[]
    s=[0,i]
    theta=[0.1]
    A = 1
    
    
    Y,W=y(d,f,u,v,s,theta,a) 
    for i in range(len(a)):
        A *= a[i]
    yy.append(Y)
    aa.append(A)
    ww.append(W)
#%%
plt.figure(5)
plt.title('s2 vs seperation of the beam')
plt.xlabel('ss/mm')
plt.ylabel('y/mm')
plt.plot(ss,yy,label='simulation')
#plt.plot(data_u,data_y,'x',label='zemax data')
plt.legend()
plt.savefig('s2 vs y',dpi=300)


#%%
plt.figure(6)
plt.title('s2 vs magnification')
plt.xlabel('s2/mm')
plt.ylabel('a')
plt.plot(ss,aa)
plt.savefig('s2 vs a',dpi=300)

#%%

Ss = np.linspace(-100,90,11)
W_s = [5.61096E-01, 5.64512E-01,5.67928E-01,5.71344E-01,5.74761E-01]

#%%

plt.figure(7)
plt.title('s2 vs w')
plt.xlabel('s2/mm')
plt.ylabel('w/mm')
plt.plot(Ss[:len(W_s)],W_s,'x',label='zemax')
plt.plot(ss,ww)
plt.legend()
plt.savefig('s2 vs w',dpi=300)

